knitr::opts_chunk$set(echo = TRUE)
```{r echo=FALSE}
```{r echo=FALSE}
rmarkdown:::themes()
![test](images/i1.png)
! [Alt text] (images/i1.png)
```{r}
![test](images/i1.png)
```
library(recommenderlab)
library(readr)
library(tidyverse)
final_df <- read_csv("final_df.csv")
final_df[-1] <- na_if(final_df[-1], 1)
apply(final_df[-1], 2, function(x) sum(is.na(x)))
final_df <- as.matrix(final_df[,-1])
rownames(final_df) <- paste0("u", 1:120)
colnames(final_df) <- paste0("i", 1:50)
colnames(final_df)
rownames(final_df)
r <- as(final_df, "realRatingMatrix")
r
final_df <- read_csv("final_df.csv")
final_df[-1] <- na_if(final_df[-1], 1)
#apply(final_df[-1], 2, function(x) sum(is.na(x)))
final_df <- as.matrix(final_df[,-1])
rownames(final_df) <- paste0("u", 1:120)
colnames(final_df) <- paste0("i", 1:50)
colnames(final_df)
rownames(final_df)
r <- as(final_df, "realRatingMatrix")
r
getRatingMatrix(r)
identical(as(r, "matrix"),final_df)
str(r)
r_sample <- as(sample(r, 5), "list")
r_sample
rowMeans(sample(r, 5))
hist(getRatings(r), breaks=5)
hist(getRatings(r_normalized), breaks=5)
r_normalized <- normalize(r)
r_normalized
r_normalized_zscore <- normalize(r, method="Z-score")
image(r_normalized, main = "Normalized Ratings")
image(r_normalized_zscore, main = "Normalized Ratings with z-score")
image(r, main = "Raw Ratings")
hist(getRatings(r), breaks=5)
hist(getRatings(r), breaks=5)
hist(rowCounts(r), breaks=15)
hist(colMeans(r), breaks=15)
recommenderRegistry$get_entries(dataType = "realRatingMatrix")
r_model_2 <- Recommender(r[1:120], method = "UBCF")
#  param=list(method="pearson"))
#r_model_2 <- Recommender(r[1:120], method = "UBCF")
#  param=list(normalize = "Z-score",method="pearson"))
r_model_2
names(getModel(r_model_2))
getModel(r_model_2)$min_matching_items
r_model_2 <- Recommender(r[1:120], method = "UBCF",
param=list(method="pearson"))
#r_model_2 <- Recommender(r[1:120], method = "UBCF")
#  param=list(normalize = "Z-score",method="pearson"))
r_model_2
names(getModel(r_model_2))
getModel(r_model_2)$min_matching_items
getModel(r_model_2)$method
getModel(r_model_2)$method
r_model_2 <- Recommender(r[1:120], method = "UBCF",
param=list(method="pearson"))
#r_model_2 <- Recommender(r[1:120], method = "UBCF")
#  param=list(normalize = "Z-score",method="pearson"))
r_model_2
names(getModel(r_model_2))
getModel(r_model_2)$method
r_model <- Recommender(r[1:120], method = "POPULAR")
r_model
names(getModel(r_model))
getModel(r_model)$topN
r_model <- Recommender(r[1:120], method = "POPULAR")
r_model
recom <- predict(r_model, r[c(39,100,101,5)], n=15)
recom
as(recom, "list")
str(r)
identical(as(r, "matrix"),final_df)
r_sample <- as(sample(r, 5), "list")
r_sample
rowMeans(sample(r, 5))
